@page "/task/{Id:int}"
@using Todo.UI.Services
@inject ITasksService tasksService;
@inject NavigationManager navigator;

<EditForm Model="@task" OnSubmit="@Save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="task.Title" class="form-control" />
    </div>
    <div>
        <label for="description">Description</label>
        <InputTextArea id="description" @bind-Value="task.Description" class="form-control" />
    </div>
    <div>
        <label for="notes">Notes</label>
        <InputText id="notes" @bind-Value="task.Notes" class="form-control" />
    </div>
    <div>
        <label for="deadline">Deadline</label>
        <InputDate id="deadline" @bind-Value="task.Deadline" class="form-control" />
    </div>
    <div>
        <label for="state">State</label>
        <InputSelect id="state" @bind-Value="task.State" class="form-control">
            <option value="@task.State" selected>@task.State</option>
            <option value="0">Todo</option>
            <option value="1">InProccess</option>
            <option value="2">Complated</option>
        </InputSelect>
    </div>
    <div>
        <label for="priority">Priority</label>
        <InputSelect id="priority" @bind-Value="task.Priority" class="form-control">
            <option value="@task.Priority" selected>@task.Priority</option>
            <option value="0">None</option>
            <option value="1">Low</option>
            <option value="2">Medium</option>
            <option value="3">High</option>
        </InputSelect>
    </div>

    <button type="submit">Create</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    Models.Task task = new Models.Task()
        {
            Id = 000,
            Title = "Yuklanmoqda ...",
            CreatedAt = DateTime.Now,
            Deadline = DateTime.Now,
            Description = "Yuklanmoqda...",
            LastModifiedAt = DateTime.Now,
            Notes = "Yuklanmoqda ...",
            Priority = Models.Enums.PriorityLevel.None,
            State = Models.Enums.State.ToDo
        };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var result = await tasksService.GetTaskByIdAsync((int)Id);
        if(result is not null)
        {
            task = result;
        }
        else
        {
            navigator.NavigateTo("/tasks");
        }
    }

    private async System.Threading.Tasks.Task Save()
    {
        await tasksService.UpdateTaskByIdAsync(task);
    }
}
